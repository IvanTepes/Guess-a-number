// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus,
        &:focus-within {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus,
        &:focus-within {
            @content;
        }
    }
}

/// Make a context based selector a little more friendly
/// @author Kitty Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

// ! =========== ! Main Mixins ===========

// Main text style
@mixin text-style {
    background-color: var(--theme__color);
    color: var(--theme__color--text);
}

// Align and justify element to center
@mixin position__to--center {
    display: flex;
    justify-content: center;
    align-items: center;
}

// Theme mixin
@mixin themes {
    .secret-number__col {
        background-color: var(--theme__color);
        border: 1px solid var(--theme__color--border);
        border-radius: $border__radius;
        min-width: fit-content;
    }

    .wrapper {
        background-color: var(--theme__color);
        box-shadow: inset rgb(0 0 0) 0px 0px 10px 0px;
        color: var(--theme__color--text);
    }

    .check__input--number {
        background-color: var(--theme__color--input);
        border-radius: 10px;
        box-shadow: inset 0px 0px 5px 0px black, inset 0px 0px 0px 0px black;
        color: var(--theme__color);
        box-shadow: inset 2px 2px 3px 0px var(--theme__color),
            inset -1px -1px 3px 0px var(--theme__color);
        border: 1px solid var(--theme__color--input);
    }

    .input {
        background-color: var(--theme__color--input);
        border: 1px solid var(--theme__color--border);
        border-radius: $border__radius;
    }

    .btn {
        box-shadow: inset 1px 1px 0px 0 rgba(255, 255, 255, 0.36),
            rgba(0, 0, 0, 0.7) 1px 1px 1px 0px, var(--theme__color) 1px 1px 0;
        color: var(--theme__color) !important;
        background-color: var(--theme__color--input) !important;
        text-shadow: 0px 1px black;
    }
}

// Card color
@mixin card-style($theme-color, $text-color) {
    background-color: $theme-color;
    border-radius: $border__radius;
    color: $text-color;
}

// Drop Shadow
@mixin drop-shadow($color) {
    box-shadow: inset 3px 2px 5px 0 rgba(255, 255, 255, 0.36),
        rgba(222, 241, 184, 0) 7px 3px 10px, rgba(0, 0, 0, 0.7) 3px 3px 3px 0px,
        $color 4px 4px 0;
}

//
@mixin hover($bg-color, $text-color) {
    background-color: $bg-color !important;
    box-shadow: inset 3px 2px 5px 0 #000000, rgb(222 241 184 / 0%) 7px 3px 10px,
        rgb(0 0 0 / 16%) 3px 3px 3px 0px, rgb(127 180 20 / 0%) 4px 4px 0;
    color: $text-color !important;
}

// A map of breakpoints.
$breakpoints: (
    mobile-small: 320px,
    mobile-medium: 375px,
    mobile-large: 425px,
    tablets: 768px,
    laptop: 1024px,
    desktop-lg: 1440px,
    desktop-xl: 1600px,
);

@mixin breakpoint-device($breakpoint, $direction) {
    @if map-has-key($breakpoints, $breakpoint) {
        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        @if $direction == max {
            @media (max-width: ($breakpoint-value - 1)) {
                @content;
            }
        } @else if $direction == min {
            @media (min-width: $breakpoint-value) {
                @content;
            }
        } @else {
            @media ($direction: $breakpoint-value) {
                @content;
            }
        }

        // If the breakpoint doesn't exist in the map.
    } @else {
        @if $direction == max {
            @media (max-width: $breakpoint) {
                @content;
            }
        } @else if $direction == min {
            @media (min-width: $breakpoint) {
                @content;
            }
        } @else {
            @media ($direction: $breakpoint) {
                @content;
            }
        }
    }
}
